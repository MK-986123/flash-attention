# #########################################################
# Build wheels with GitHub hosted runner
# #########################################################

name: "[Linux x86_64] Build wheels and upload to GitHub Releases"

on:
  workflow_call:
    inputs:
      flash-attn-version:
        description: "Flash-Attention version"
        required: true
        type: string
      python-version:
        description: "Python version"
        required: true
        type: string
      torch-version:
        description: "PyTorch version"
        required: true
        type: string
      cuda-version:
        description: "CUDA version"
        required: true
        type: string

jobs:
  build_wheels:
    name: Build wheels and Upload (Linux x86_64, ${{ inputs.flash-attn-version }}, ${{ inputs.python-version }}, ${{ inputs.torch-version }}, ${{ inputs.cuda-version }})
    runs-on: ubuntu-22.04
    env:
      DEBIAN_FRONTEND: noninteractive
      TERM: xterm-256color
    steps:
      - uses: actions/checkout@v4

      - name: Maximize build space
        run: |
          df -h
          echo "-----------------------------"
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          df -h

      - name: Set Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 48

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - uses: Jimver/cuda-toolkit@master
        with:
          cuda: ${{ inputs.cuda-version }}
          sub-packages: '["nvcc", "toolkit"]'
          method: "network"
          use-github-cache: false
          use-local-cache: false

      # Fix: Install cuDNN 9 so torch can import (provides libcudnn.so.9)
      - name: Install cuDNN 9
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libcudnn9 libcudnn9-dev
          ls -l /usr/lib/x86_64-linux-gnu/libcudnn.so.9*

      # Fix: Persist CUDA/CUDNN env across steps; use canonical /usr/local/cuda
      - name: Configure CUDA/CUDNN environment
        run: |
          echo "CUDA_HOME=/usr/local/cuda" >> "$GITHUB_ENV"
          echo "PATH=/usr/local/cuda/bin:${PATH}" >> "$GITHUB_ENV"
          echo "LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}" >> "$GITHUB_ENV"
          echo "TORCH_CUDA_ARCH_LIST=8.9" >> "$GITHUB_ENV"
          nvcc --version || true
          echo "Configured CUDA and cuDNN paths."

      # Fix: Install the exact torch wheel you specified for the pinned combo (no rename)
      - name: Install exact torch wheel (pinned combo)
        if: ${{ inputs.python-version == '3.12' && inputs.cuda-version == '13.0.0' && inputs.torch-version == '2.9.0.dev20250903+cu130' }}
        run: |
          cd /tmp
          wget "https://download.pytorch.org/whl/nightly/cu130/torch-2.9.0.dev20250903%2Bcu130-cp312-cp312-manylinux_2_28_x86_64.whl"
          python -m pip install --upgrade pip
          python -m pip install --no-deps /tmp/torch-2.9.0.dev20250903+cu130-cp312-cp312-manylinux_2_28_x86_64.whl
          python - << 'PY'
          import torch
          print("torch:", torch.__version__)
          print("CUDA available:", torch.cuda.is_available())
          print("CUDA version:", torch.version.cuda)
          PY

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build clang
          python -m pip install -U pip setuptools==75.8.0 wheel packaging psutil

      - name: Build wheels
        id: build_wheels
        env:
          MAX_JOBS: 2
          NVCC_THREADS: 2
        run: |
          chmod +x build_linux.sh
          ./build_linux.sh ${{ inputs.flash-attn-version }} ${{ inputs.python-version }} ${{ inputs.torch-version }} ${{ inputs.cuda-version }}
          wheel_name=$(basename $(ls flash-attention/dist/*.whl | head -n 1))
          echo "WHEEL_NAME=$wheel_name" >> $GITHUB_OUTPUT

      - name: Install Test
        run: |
          pip install --no-cache-dir "flash-attention/dist/${{ steps.build_wheels.outputs.WHEEL_NAME }}"
          python -c "import flash_attn; print(flash_attn.__version__)"

      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name=${{ github.ref_name }}
          wheel_path="flash-attention/dist/${{ steps.build_wheels.outputs.WHEEL_NAME }}"
          if [ ! -f "$wheel_path" ]; then
            echo "Error: Wheel file not found at $wheel_path"
            exit 1
          fi
          gh release upload "$tag_name" "$wheel_path" --clobber
